{"ast":null,"code":"var _this = this,\n    _jsxFileName = \"C:\\\\Users\\\\User\\\\Documents\\\\other_study\\\\next.js\\\\nextjs-blog\\\\components\\\\navBar\\\\NavBar.tsx\";\n\nvar __jsx = React.createElement;\nimport styles from './NavBar.module.scss';\nimport React from 'react';\nimport NavBar1 from './NavBar1';\n\nvar DesNav = function DesNav() {\n  return __jsx(\"div\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 11,\n      columnNumber: 3\n    }\n  }, __jsx(\"div\", {\n    className: styles.topFixed,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 12,\n      columnNumber: 3\n    }\n  }, __jsx(\"div\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 13,\n      columnNumber: 5\n    }\n  }), __jsx(\"div\", {\n    className: styles.sticky,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 16,\n      columnNumber: 5\n    }\n  }, __jsx(NavBar1, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 18,\n      columnNumber: 5\n    }\n  }))));\n};\n\n_c = DesNav;\nexport default DesNav; //import  '../../state/responsive_controller';\n\n/*\r\nlet prevScrollpos = window.pageYOffset;\r\nwindow.onscroll = function() {\r\n  let currentScrollPos = window.pageYOffset;\r\n  if (prevScrollpos > currentScrollPos) {\r\n    document.getElementById(\"Nav\").style.top = \"0\";\r\n  } else {\r\n    document.getElementById(\"Nav\").style.top = \"-50px\";\r\n  }\r\n  prevScrollpos = currentScrollPos;\r\n}\r\n*/\n//const DesNav1 = () => (\n//  <div>\n//  <div className={styles.topFixed} >\n//    <div >\n//      \n//    </div>\n//    <div className={styles.sticky}>\n//      <div className={styles.NavBarDesktop}>\n//      <Link href='/'><div className={styles.h3}>yuhangang</div></Link>\n//      <div className={styles.container}></div>\n//     \n//        <Link href='/about' prefetch><div className={styles.NavBarButtons}>About</div></Link>\n//        <Link href='/projects' prefetch><div className={styles.NavBarButtons}>Projects</div></Link>\n//        <a href=\"mailto:redrainhang@gmail.com\" className={styles.NavBarButtons} target=\"_blank\">Contact</a>\n//        \n//        \n//      </div>  \n//      <div className={styles.secondBar}>\n//      \n//      </div>\n//    </div>\n//\n//\n//  </div>\n//\n//  </div>\n//  \n//)\n//const MobileNav = () => (\n// \n//\n//    <div className={styles.NavBarMobile}>\n//    <Link href='/'><div className={styles.mobileh3}>yuhangang</div></Link>\n//    </div>\n//)\n//\n//const NavNew =()=>{\n//  const [width, setWidth] = React.useState(window.innerWidth);\n//  const breakpoint = 620;\n//\n//  React.useEffect(() => {\n//    /* Inside of a \"useEffect\" hook add an event listener that updates\n//       the \"width\" state variable when the window size changes */\n//    window.addEventListener(\"resize\", () => setWidth(window.innerWidth));\n//\n//    /* passing an empty array as the dependencies of the effect will cause this\n//       effect to only run when the component mounts, and not each time it updates.\n//       We only want the listener to be added once */\n//  }, []);\n//\n//  return width < breakpoint ? <MobileNav/> : <DesNav/>;\n//}\n\nvar _c;\n\n$RefreshReg$(_c, \"DesNav\");","map":{"version":3,"sources":["C:/Users/User/Documents/other_study/next.js/nextjs-blog/components/navBar/NavBar.tsx"],"names":["styles","React","NavBar1","DesNav","topFixed","sticky"],"mappings":";;;;AAGA,OAAOA,MAAP,MAAmB,sBAAnB;AAEA,OAAOC,KAAP,MAAkB,OAAlB;AAEA,OAAOC,OAAP,MAAoB,WAApB;;AAEA,IAAMC,MAAM,GAAG,SAATA,MAAS;AAAA,SACb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACA;AAAK,IAAA,SAAS,EAAEH,MAAM,CAACI,QAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,EAIE;AAAK,IAAA,SAAS,EAAEJ,MAAM,CAACK,MAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAEA,MAAC,OAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAFA,CAJF,CADA,CADa;AAAA,CAAf;;KAAMF,M;AAkBN,eAAeA,MAAf,C,CAEA;;AACA;;;;;;;;;;;;AAYA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","sourcesContent":["\r\nimport Link from 'next/link'\r\n\r\nimport styles from './NavBar.module.scss'\r\nimport { useMediaQuery } from 'react-responsive';\r\nimport React from 'react';\r\nimport ResponsiveComponent from '../responsiveComponent/responsive';\r\nimport NavBar1 from './NavBar1';\r\n\r\nconst DesNav = () => (\r\n  <div>\r\n  <div className={styles.topFixed} >\r\n    <div >\r\n      \r\n    </div>\r\n    <div className={styles.sticky}>\r\n\r\n    <NavBar1></NavBar1>\r\n    </div>\r\n\r\n\r\n  </div>\r\n  \r\n  </div>\r\n  \r\n)\r\n\r\nexport default DesNav;\r\n\r\n//import  '../../state/responsive_controller';\r\n/*\r\nlet prevScrollpos = window.pageYOffset;\r\nwindow.onscroll = function() {\r\n  let currentScrollPos = window.pageYOffset;\r\n  if (prevScrollpos > currentScrollPos) {\r\n    document.getElementById(\"Nav\").style.top = \"0\";\r\n  } else {\r\n    document.getElementById(\"Nav\").style.top = \"-50px\";\r\n  }\r\n  prevScrollpos = currentScrollPos;\r\n}\r\n*/\r\n//const DesNav1 = () => (\r\n//  <div>\r\n//  <div className={styles.topFixed} >\r\n//    <div >\r\n//      \r\n//    </div>\r\n//    <div className={styles.sticky}>\r\n//      <div className={styles.NavBarDesktop}>\r\n//      <Link href='/'><div className={styles.h3}>yuhangang</div></Link>\r\n//      <div className={styles.container}></div>\r\n//     \r\n//        <Link href='/about' prefetch><div className={styles.NavBarButtons}>About</div></Link>\r\n//        <Link href='/projects' prefetch><div className={styles.NavBarButtons}>Projects</div></Link>\r\n//        <a href=\"mailto:redrainhang@gmail.com\" className={styles.NavBarButtons} target=\"_blank\">Contact</a>\r\n//        \r\n//        \r\n//      </div>  \r\n//      <div className={styles.secondBar}>\r\n//      \r\n//      </div>\r\n//    </div>\r\n//\r\n//\r\n//  </div>\r\n//\r\n//  </div>\r\n//  \r\n//)\r\n\r\n//const MobileNav = () => (\r\n// \r\n//\r\n//    <div className={styles.NavBarMobile}>\r\n//    <Link href='/'><div className={styles.mobileh3}>yuhangang</div></Link>\r\n//    </div>\r\n//)\r\n//\r\n//const NavNew =()=>{\r\n//  const [width, setWidth] = React.useState(window.innerWidth);\r\n//  const breakpoint = 620;\r\n//\r\n//  React.useEffect(() => {\r\n//    /* Inside of a \"useEffect\" hook add an event listener that updates\r\n//       the \"width\" state variable when the window size changes */\r\n//    window.addEventListener(\"resize\", () => setWidth(window.innerWidth));\r\n//\r\n//    /* passing an empty array as the dependencies of the effect will cause this\r\n//       effect to only run when the component mounts, and not each time it updates.\r\n//       We only want the listener to be added once */\r\n//  }, []);\r\n//\r\n//  return width < breakpoint ? <MobileNav/> : <DesNav/>;\r\n//}\r\n\r\n"]},"metadata":{},"sourceType":"module"}