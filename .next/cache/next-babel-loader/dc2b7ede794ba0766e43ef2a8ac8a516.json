{"ast":null,"code":"","map":{"version":3,"sources":[],"names":[],"mappings":"","sourcesContent":["\r\nimport Link from 'next/link'\r\n\r\nimport styles from './NavBar.module.scss'\r\nimport { useMediaQuery } from 'react-responsive';\r\nimport React from 'react';\r\nimport ResponsiveComponent from '../responsiveComponent/responsive';\r\nimport NavBar1 from './NavBar1';\r\n//import  '../../state/responsive_controller';\r\n/*\r\nlet prevScrollpos = window.pageYOffset;\r\nwindow.onscroll = function() {\r\n  let currentScrollPos = window.pageYOffset;\r\n  if (prevScrollpos > currentScrollPos) {\r\n    document.getElementById(\"Nav\").style.top = \"0\";\r\n  } else {\r\n    document.getElementById(\"Nav\").style.top = \"-50px\";\r\n  }\r\n  prevScrollpos = currentScrollPos;\r\n}\r\n*/\r\n//const DesNav1 = () => (\r\n//  <div>\r\n//  <div className={styles.topFixed} >\r\n//    <div >\r\n//      \r\n//    </div>\r\n//    <div className={styles.sticky}>\r\n//      <div className={styles.NavBarDesktop}>\r\n//      <Link href='/'><div className={styles.h3}>yuhangang</div></Link>\r\n//      <div className={styles.container}></div>\r\n//     \r\n//        <Link href='/about' prefetch><div className={styles.NavBarButtons}>About</div></Link>\r\n//        <Link href='/projects' prefetch><div className={styles.NavBarButtons}>Projects</div></Link>\r\n//        <a href=\"mailto:redrainhang@gmail.com\" className={styles.NavBarButtons} target=\"_blank\">Contact</a>\r\n//        \r\n//        \r\n//      </div>  \r\n//      <div className={styles.secondBar}>\r\n//      \r\n//      </div>\r\n//    </div>\r\n//\r\n//\r\n//  </div>\r\n//\r\n//  </div>\r\n//  \r\n//)\r\n\r\n//const MobileNav = () => (\r\n// \r\n//\r\n//    <div className={styles.NavBarMobile}>\r\n//    <Link href='/'><div className={styles.mobileh3}>yuhangang</div></Link>\r\n//    </div>\r\n//)\r\n//\r\n//const NavNew =()=>{\r\n//  const [width, setWidth] = React.useState(window.innerWidth);\r\n//  const breakpoint = 620;\r\n//\r\n//  React.useEffect(() => {\r\n//    /* Inside of a \"useEffect\" hook add an event listener that updates\r\n//       the \"width\" state variable when the window size changes */\r\n//    window.addEventListener(\"resize\", () => setWidth(window.innerWidth));\r\n//\r\n//    /* passing an empty array as the dependencies of the effect will cause this\r\n//       effect to only run when the component mounts, and not each time it updates.\r\n//       We only want the listener to be added once */\r\n//  }, []);\r\n//\r\n//  return width < breakpoint ? <MobileNav/> : <DesNav/>;\r\n//}\r\n\r\n"]},"metadata":{},"sourceType":"module"}