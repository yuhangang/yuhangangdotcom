{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\n\nvar _this = this,\n    _jsxFileName = \"C:\\\\Users\\\\User\\\\Documents\\\\other_study\\\\next.js\\\\nextjs-blog\\\\components\\\\navBar\\\\NavBar.tsx\";\n\nvar __jsx = React.createElement;\nimport Link from 'next/link';\nimport styles from './NavBar.module.scss';\nimport React from 'react';\n\n//import  '../../state/responsive_controller';\n\n/*\r\nlet prevScrollpos = window.pageYOffset;\r\nwindow.onscroll = function() {\r\n  let currentScrollPos = window.pageYOffset;\r\n  if (prevScrollpos > currentScrollPos) {\r\n    document.getElementById(\"Nav\").style.top = \"0\";\r\n  } else {\r\n    document.getElementById(\"Nav\").style.top = \"-50px\";\r\n  }\r\n  prevScrollpos = currentScrollPos;\r\n}\r\n*/\nvar DesNav = function DesNav() {\n  return __jsx(\"div\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 22,\n      columnNumber: 3\n    }\n  }, __jsx(\"div\", {\n    className: styles.topFixed,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 23,\n      columnNumber: 3\n    }\n  }, __jsx(\"div\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 24,\n      columnNumber: 5\n    }\n  }), __jsx(\"div\", {\n    className: styles.sticky,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 27,\n      columnNumber: 5\n    }\n  }, __jsx(\"div\", {\n    className: styles.NavBarDesktop,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 28,\n      columnNumber: 7\n    }\n  }, __jsx(Link, {\n    href: \"/\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 29,\n      columnNumber: 7\n    }\n  }, __jsx(\"div\", {\n    className: styles.h3,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 29,\n      columnNumber: 22\n    }\n  }, \"yuhangang\")), __jsx(\"div\", {\n    className: styles.container,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 30,\n      columnNumber: 7\n    }\n  }), __jsx(Link, {\n    href: \"/about\",\n    prefetch: true,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 9\n    }\n  }, __jsx(\"div\", {\n    className: styles.NavBarButtons,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 38\n    }\n  }, \"About\")), __jsx(Link, {\n    href: \"/projects\",\n    prefetch: true,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 9\n    }\n  }, __jsx(\"div\", {\n    className: styles.NavBarButtons,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 41\n    }\n  }, \"Projects\")), __jsx(\"a\", {\n    href: \"javascript: document.body.scrollIntoView({behavior: 'smooth', block: 'end', inline: 'nearest'});\",\n    className: styles.NavBarButtons,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 9\n    }\n  }, \"Contact\")), __jsx(\"div\", {\n    className: styles.secondBar,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 7\n    }\n  }))));\n};\n\nvar MobileNav = function MobileNav() {\n  return __jsx(\"div\", {\n    className: styles.topFixed,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 3\n    }\n  }, __jsx(\"div\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 5\n    }\n  }, __jsx(\"div\", {\n    className: styles.sticky,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 5\n    }\n  }, __jsx(\"div\", {\n    className: styles.NavBarMobile,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 5\n    }\n  }, __jsx(Link, {\n    href: \"/\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 5\n    }\n  }, __jsx(\"div\", {\n    className: styles.mobileh3,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 20\n    }\n  }, \"yuhangang\"))))));\n};\n\nvar NavNew = function NavNew() {\n  var _React$useState = React.useState(window.innerWidth),\n      _React$useState2 = _slicedToArray(_React$useState, 2),\n      width = _React$useState2[0],\n      setWidth = _React$useState2[1];\n\n  var breakpoint = 620;\n  React.useEffect(function () {\n    /* Inside of a \"useEffect\" hook add an event listener that updates\r\n       the \"width\" state variable when the window size changes */\n    window.addEventListener(\"resize\", function () {\n      return setWidth(window.innerWidth);\n    });\n    /* passing an empty array as the dependencies of the effect will cause this\r\n       effect to only run when the component mounts, and not each time it updates.\r\n       We only want the listener to be added once */\n  }, []);\n  return width < breakpoint ? __jsx(MobileNav, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 31\n    }\n  }) : __jsx(DesNav, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 46\n    }\n  });\n};\n\nexport default DesNav;","map":{"version":3,"sources":["C:/Users/User/Documents/other_study/next.js/nextjs-blog/components/navBar/NavBar.tsx"],"names":["Link","styles","React","DesNav","topFixed","sticky","NavBarDesktop","h3","container","NavBarButtons","secondBar","MobileNav","NavBarMobile","mobileh3","NavNew","useState","window","innerWidth","width","setWidth","breakpoint","useEffect","addEventListener"],"mappings":"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","sourcesContent":["\r\nimport Link from 'next/link'\r\n\r\nimport styles from './NavBar.module.scss'\r\nimport { useMediaQuery } from 'react-responsive';\r\nimport React from 'react';\r\nimport ResponsiveComponent from '../responsiveComponent/responsive';\r\n//import  '../../state/responsive_controller';\r\n/*\r\nlet prevScrollpos = window.pageYOffset;\r\nwindow.onscroll = function() {\r\n  let currentScrollPos = window.pageYOffset;\r\n  if (prevScrollpos > currentScrollPos) {\r\n    document.getElementById(\"Nav\").style.top = \"0\";\r\n  } else {\r\n    document.getElementById(\"Nav\").style.top = \"-50px\";\r\n  }\r\n  prevScrollpos = currentScrollPos;\r\n}\r\n*/\r\nconst DesNav = () => (\r\n  <div>\r\n  <div className={styles.topFixed} >\r\n    <div >\r\n      \r\n    </div>\r\n    <div className={styles.sticky}>\r\n      <div className={styles.NavBarDesktop}>\r\n      <Link href='/'><div className={styles.h3}>yuhangang</div></Link>\r\n      <div className={styles.container}></div>\r\n     \r\n        <Link href='/about' prefetch><div className={styles.NavBarButtons}>About</div></Link>\r\n        <Link href='/projects' prefetch><div className={styles.NavBarButtons}>Projects</div></Link>\r\n        <a href=\"javascript: document.body.scrollIntoView({behavior: 'smooth', block: 'end', inline: 'nearest'});\" className={styles.NavBarButtons}>Contact</a>\r\n        \r\n        \r\n      </div>  \r\n      <div className={styles.secondBar}>\r\n        \r\n      </div>\r\n    </div>\r\n\r\n\r\n  </div>\r\n  </div>\r\n  \r\n)\r\nconst MobileNav = () => (\r\n \r\n  <div className={styles.topFixed} >\r\n    <div >\r\n      \r\n    <div className={styles.sticky}>\r\n    <div className={styles.NavBarMobile}>\r\n    <Link href='/'><div className={styles.mobileh3}>yuhangang</div></Link>\r\n    </div>\r\n  \r\n</div>\r\n\r\n\r\n  </div>\r\n  </div>\r\n  \r\n)\r\n\r\nconst NavNew =()=>{\r\n  const [width, setWidth] = React.useState(window.innerWidth);\r\n  const breakpoint = 620;\r\n\r\n  React.useEffect(() => {\r\n    /* Inside of a \"useEffect\" hook add an event listener that updates\r\n       the \"width\" state variable when the window size changes */\r\n    window.addEventListener(\"resize\", () => setWidth(window.innerWidth));\r\n\r\n    /* passing an empty array as the dependencies of the effect will cause this\r\n       effect to only run when the component mounts, and not each time it updates.\r\n       We only want the listener to be added once */\r\n  }, []);\r\n\r\n  return width < breakpoint ? <MobileNav/> : <DesNav/>;\r\n}\r\n\r\nexport default DesNav;"]},"metadata":{},"sourceType":"module"}